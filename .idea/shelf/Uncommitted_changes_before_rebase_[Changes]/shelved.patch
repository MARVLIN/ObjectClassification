Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># file processing\nimport json\nfrom json import JSONEncoder\n# image processing\nimport cv2\nimport numpy\nimport numpy as np\n\nimport socket\nimport sys\n\n# threshold or confidence\nthres = 0.45  # Threshold to detect object\nnms_threshold = 0.2\n\n# video output for embedded camera\ncap = cv2.VideoCapture(0)\n# cap.set(3,1280)\n# cap.set(4,720)\n# cap.set(10,150)\n\nclassNames = []\nclassFile = 'models/coco.names'\nwith open(classFile, 'rt') as f:\n    classNames = f.read().rstrip('n').split('n')\n\n    # print(classNames)\n    configPath = 'models/ssd_mobilenet_v3_large_coco_2020_01_14.pbtxt'\n    weightsPath = 'models/frozen_inference_graph.pb'\n\n    net = cv2.dnn_DetectionModel(weightsPath, configPath)\n    net.setInputSize(320, 320)\n    net.setInputScale(1.0 / 127.5)\n    net.setInputMean((127.5, 127.5, 127.5))\n    net.setInputSwapRB(True)\n\n    while True:\n        success, img = cap.read()\n        classIds, confs, bbox = net.detect(img, confThreshold=thres)\n        bbox = list(bbox)\n        confs = list(np.array(confs).reshape(1, -1)[0])\n        confs = list(map(float, confs))\n        # print(type(confs[0]))\n        # print(confs)\n\n        indices = cv2.dnn.NMSBoxes(bbox, confs, thres, nms_threshold)\n        # print(indices)\n\n        # LOOP for detection from the camera\n        try:\n            i = indices[0]\n            box = bbox[i]\n            x, y, w, h = box[0], box[1], box[2], box[3]\n            reqCommand = 'Capture_pic'\n            command = input('Enter command for a snap')\n            if command == reqCommand:\n                out = cv2.imwrite('capture.jpg', indices)\n\n            cv2.rectangle(img, (x, y), (x + w, h + y), color=(0, 255, 0), thickness=2)\n            cv2.putText(img, classNames[classIds[i] - 1].upper(), (box[0] + 10, box[1] + 30),\n                        cv2.FONT_HERSHEY_COMPLEX, 1, (0, 255, 0), 2)\n\n            cv2.imshow('Output', img)\n            cv2.waitKey(1)\n\n\n            # retrieving JSON from ndarray\n            class NumpyArrayEncoder(JSONEncoder):\n                def default(self, obj):\n                    if isinstance(obj, numpy.ndarray):\n                        return obj.tolist()\n                    return JSONEncoder.default(self, obj)\n\n\n            numpyArray = numpy.array([x, y, w, h])\n\n            numpyData = {'array': numpyArray}\n            encodedNumpyData = json.dumps(numpyData, cls=NumpyArrayEncoder)\n            # print('Printing JSON')\n            print(encodedNumpyData)  # json array of coordinates\n\n            ## configuring ssh\n            HEADER = 64\n            PORT = 5050\n            FORMAT = 'utf-8'\n            DISCONNECT_MESSAGE = \"!DISCONNECT\"\n            SERVER = \"23.254.176.188\"\n            ADDR = (SERVER, PORT)\n\n            client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            client.connect(ADDR)\n\n            def send(msg):\n                message = msg.encode(FORMAT)\n                msg_length = len(message)\n                send_length = str(msg_length).encode(FORMAT)\n                send_length += b' ' * (HEADER - len(send_length))\n                client.send(send_length)\n                client.send(message)\n                print(client.recv(2048).decode(FORMAT))\n\n\n            send(encodedNumpyData)\n\n            send(DISCONNECT_MESSAGE)\n\n\n        # If no objects in ndarray: indices\n        except:\n            print('No objects detected')\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 8dd194175e09a07d5a44b467ce8122bb49dcbb9b)
+++ b/main.py	(date 1657243027654)
@@ -78,7 +78,7 @@
             encodedNumpyData = json.dumps(numpyData, cls=NumpyArrayEncoder)
             # print('Printing JSON')
             print(encodedNumpyData)  # json array of coordinates
-
+dsf
             ## configuring ssh
             HEADER = 64
             PORT = 5050
